{"version":3,"sources":["App.js","apiKey.js","index.js"],"names":["Map","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","path","lat","lng","bearing","state","progress","directions","stops","id","velocity","initialDate","Date","getDistance","componentDidMount","interval","window","setInterval","moveObject","componentWillUnmount","console","log","clearInterval","distance","filter","coordinates","nextLine","find","setState","lastLine","lastLineLatLng","google","maps","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","componentWillMount","calculatePath","map","i","array","_objectSpread","lat1","lng1","latLong1","_array$","lat2","lng2","latLong2","computeDistanceBetween","startSimmulator","componentDidUpdate","point1","point2","point1LatLng","point2LatLng","actualAngle","computeHeading","marker","document","querySelector","style","transform","render","icon1","url","scaledSize","Size","anchor","Point","scale","React","createElement","Fragment","GoogleMap","defaultZoom","defaultCenter","onClick","Polyline","traffic","TrafficLayer","options","strokeColor","strokeWeight","strokeOpacity","stop","index","Marker","key","title","label","icon","_createClass","Component","MapComponent","withScriptjs","withGoogleMap","mapURL","App","googleMapURL","loadingElement","height","containerElement","width","mapElement","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.8e79c4e8.chunk.js","sourcesContent":["import React, { createClass } from \"react\";\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  Polyline,\n  Marker\n} from \"react-google-maps\";\nimport API_KEY from \"./apiKey\";\nimport origPath from \"./path\";\nimport stops from \"./stops\";\nconst car =\n  \"M17.402,0H5.643C2.526,0,0,3.467,0,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759c3.116,0,5.644-2.527,5.644-5.644 V6.584C23.044,3.467,20.518,0,17.402,0z M22.057,14.188v11.665l-2.729,0.351v-4.806L22.057,14.188z M20.625,10.773 c-1.016,3.9-2.219,8.51-2.219,8.51H4.638l-2.222-8.51C2.417,10.773,11.3,7.755,20.625,10.773z M3.748,21.713v4.492l-2.73-0.349 V14.502L3.748,21.713z M1.018,37.938V27.579l2.73,0.343v8.196L1.018,37.938z M2.575,40.882l2.218-3.336h13.771l2.219,3.336H2.575z M19.328,35.805v-7.872l2.729-0.355v10.048L19.328,35.805z\";\nconst icon = {\n  path: car,\n  scale: 0.7,\n  strokeColor: \"white\",\n  strokeWeight: 0.1,\n  fillOpacity: 1,\n  fillColor: \"#404040\",\n  offset: \"5%\",\n  rotation: 240\n  // anchor: new window.google.maps.Point(10, 10)\n};\n\nclass Map extends React.Component {\n  path = [\n    {\n      lat: 12.9802347063322,\n      lng: 77.5907760360903,\n      bearing: -20.5784744283754\n    },\n    {\n      lat: 12.9793774204024,\n      lng: 77.5910979011596,\n      bearing: 17.1118088152409\n    },\n    {\n      lat: 12.9795865148043,\n      lng: 77.5911622741734,\n      bearing: 70.6690312217414\n    },\n    {\n      lat: 12.9797746996155,\n      lng: 77.5916987159555,\n      bearing: 38.1233134168197\n    },\n    {\n      lat: 12.9801301594259,\n      lng: 77.5919776656823,\n      bearing: -45.7414247345699\n    },\n    {\n      lat: 12.9798374278543,\n      lng: 77.5922780730802,\n      bearing: 16.0994201411847\n    },\n    {\n      lat: 12.9791683258247,\n      lng: 77.5920849540387,\n      bearing: 35.6916527554558\n    },\n    {\n      lat: 12.9787501361417,\n      lng: 77.5917845466407,\n      bearing: 58.0502467067782\n    },\n    {\n      lat: 12.9784155838887,\n      lng: 77.5912481048586,\n      bearing: 64.0233912454979\n    },\n    {\n      lat: 12.9784783124705,\n      lng: 77.5913768508863,\n      bearing: 45.7412428776673\n    },\n    {\n      lat: 12.9783319457552,\n      lng: 77.5912266471873,\n      bearing: -69.926654677622\n    },\n    {\n      lat: 12.978394674358,\n      lng: 77.591054985817,\n      bearing: 16.3413468751341\n    },\n    {\n      lat: 12.9779555738058,\n      lng: 77.5909262397893,\n      bearing: 54.6749460887583\n    },\n    {\n      lat: 12.9776210204837,\n      lng: 77.5904541710211,\n      bearing: 64.0233096712307\n    },\n    {\n      lat: 12.9774746532636,\n      lng: 77.5901537636231,\n      bearing: 65.5464053454266\n    },\n    {\n      lat: 12.9761573444059,\n      lng: 77.5872569779997,\n      bearing: -66.4029340594377\n    },\n    {\n      lat: 12.9764291706147,\n      lng: 77.5866347055324,\n      bearing: -48.4630801907934\n    },\n    {\n      lat: 12.9766382674962,\n      lng: 77.5863986711483,\n      bearing: -54.992843944921\n    },\n    {\n      lat: 12.9771191896563,\n      lng: 77.5857120256672,\n      bearing: -60.0659370316888\n    }\n  ];\n  state = {\n    progress: [],\n    directions: null\n  };\n  stops = [\n    {\n      lat: 12.9802347063322,\n      lng: 77.5907760360903,\n      id: \"stop1\"\n    },\n    {\n      lat: 12.9787501361417,\n      lng: 77.5917845466407,\n      id: \"stop2\"\n    },\n    {\n      lat: 12.9771191896563,\n      lng: 77.5857120256672,\n      id: \"stop3\"\n    }\n  ];\n  velocity = 100;\n  initialDate = new Date();\n\n  getDistance = () => {\n    // seconds between when the component loaded and now\n    const differentInTime = (new Date() - this.initialDate) / 1000; // pass to seconds\n    return differentInTime * this.velocity; // d = v*t -- thanks Newton!\n  };\n\n  componentDidMount = () => {\n    this.interval = window.setInterval(this.moveObject, 1000);\n  };\n\n  componentWillUnmount = () => {\n    console.log(\"CLEAR........\");\n\n    window.clearInterval(this.interval);\n  };\n\n  moveObject = () => {\n    const distance = this.getDistance();\n    if (!distance) {\n      return;\n    }\n\n    let progress = this.path.filter(\n      (coordinates) => coordinates.distance < distance\n    );\n\n    const nextLine = this.path.find(\n      (coordinates) => coordinates.distance > distance\n    );\n\n    // console.log(progress, nextLine, distance);\n    if (!nextLine) {\n      this.setState({ progress });\n      window.clearInterval(this.interval);\n      return; // it's the end!\n    }\n    const lastLine = progress[progress.length - 1];\n\n    const lastLineLatLng = new window.google.maps.LatLng(\n      lastLine.lat,\n      lastLine.lng\n    );\n\n    const nextLineLatLng = new window.google.maps.LatLng(\n      nextLine.lat,\n      nextLine.lng\n    );\n\n    // distance of this line\n    const totalDistance = nextLine.distance - lastLine.distance;\n    const percentage = (distance - lastLine.distance) / totalDistance;\n\n    const position = window.google.maps.geometry.spherical.interpolate(\n      lastLineLatLng,\n      nextLineLatLng,\n      percentage\n    );\n\n    progress = progress.concat(position);\n    this.setState({ progress });\n  };\n\n  componentWillMount = () => {\n    this.calculatePath();\n    console.log(this.path);\n  };\n  calculatePath = () => {\n    this.path = this.path.map((coordinates, i, array) => {\n      if (i === 0) {\n        return { ...coordinates, distance: 0 }; // it begins here!\n      }\n      const { lat: lat1, lng: lng1 } = coordinates;\n      const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n\n      const { lat: lat2, lng: lng2 } = array[0];\n      const latLong2 = new window.google.maps.LatLng(lat2, lng2);\n\n      // in meters:\n      const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\n        latLong1,\n        latLong2\n      );\n\n      return { ...coordinates, distance };\n    });\n  };\n  startSimmulator = () => {\n    console.log(\"RELOAD THE COMPONENT.....\");\n    // window.clearInterval(this.interval);\n    // this.interval = 0;\n    // // console.log(\"hello\", this.interval, this.state.progress);\n    // this.setState({\n    //   progress: []\n    // });\n    // this.calculatePath();\n    // this.interval = window.setInterval(this.moveObject, 1000);\n  };\n\n  componentDidUpdate = () => {\n    const distance = this.getDistance();\n    if (!distance) {\n      return;\n    }\n\n    let progress = this.path.filter(\n      (coordinates) => coordinates.distance < distance\n    );\n\n    const nextLine = this.path.find(\n      (coordinates) => coordinates.distance > distance\n    );\n\n    let point1, point2;\n\n    if (nextLine) {\n      point1 = progress[progress.length - 1];\n      point2 = nextLine;\n    } else {\n      // it's the end, so use the latest 2\n      point1 = progress[progress.length - 2];\n      point2 = progress[progress.length - 1];\n    }\n\n    const point1LatLng = new window.google.maps.LatLng(point1.lat, point1.lng);\n    const point2LatLng = new window.google.maps.LatLng(point2.lat, point2.lng);\n\n    const angle = window.google.maps.geometry.spherical.computeHeading(\n      point1LatLng,\n      point2LatLng\n    );\n    const actualAngle = angle - 90;\n\n    const markerUrl =\n      \"https://images.vexels.com/media/users/3/154573/isolated/preview/bd08e000a449288c914d851cb9dae110-hatchback-car-top-view-silhouette-by-vexels.png\";\n    const marker = document.querySelector(`[src=\"${markerUrl}\"]`);\n\n    if (marker) {\n      // when it hasn't loaded, it's null\n      marker.style.transform = `rotate(${actualAngle}deg)`;\n    }\n  };\n\n  render = () => {\n    const icon1 = {\n      url:\n        \"https://images.vexels.com/media/users/3/154573/isolated/preview/bd08e000a449288c914d851cb9dae110-hatchback-car-top-view-silhouette-by-vexels.png\",\n      scaledSize: new window.google.maps.Size(30, 30),\n      // anchor: { x: 10, y: 10 },\n      anchor: new window.google.maps.Point(15, 15),\n      scale: 0.7\n    };\n    return (\n      <>\n        <GoogleMap\n          defaultZoom={16}\n          defaultCenter={{ lat: this.path[0].lat, lng: this.path[0].lng }}\n        >\n          <button onClick={this.startSimmulator}>Start Simmulator</button>\n\n          <Polyline\n            traffic={new window.google.maps.TrafficLayer()}\n            path={this.path}\n            options={{\n              strokeColor: \"#0088FF\",\n              strokeWeight: 6,\n              strokeOpacity: 0.6\n            }}\n          />\n\n          {this.stops.map((stop, index) => (\n            <>\n              <Marker\n                key={stop.id}\n                position={{\n                  lat: stop.lat,\n                  lng: stop.lng\n                }}\n                title={stop.id}\n                label={`${index + 1}`}\n              />\n            </>\n          ))}\n\n          {this.state.progress && (\n            <>\n              <Polyline\n                path={this.state.progress}\n                options={{ strokeColor: \"pink\" }}\n              />\n\n              <Marker\n                icon={icon1}\n                position={this.state.progress[this.state.progress.length - 1]}\n              />\n            </>\n          )}\n          {/* <TrafficLayer autoUpdate /> */}\n        </GoogleMap>\n      </>\n    );\n  };\n}\n\nconst MapComponent = withScriptjs(withGoogleMap(Map));\nconst mapURL = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY.mapsOtherkey}`;\n\nexport default () => (\n  <MapComponent\n    googleMapURL={mapURL}\n    loadingElement={<div style={{ height: `100%` }} />}\n    containerElement={<div style={{ height: `600px`, width: \"600px\" }} />}\n    mapElement={<div style={{ height: `100%` }} />}\n  />\n);\n","export default {\r\n  mapsKey: \"AIzaSyCc5FjlVhBE2hZkuM1OUbixXGsVXnRwZ4o\",\r\n  mapsOtherkey: \"AIzaSyA5Lt3E5gYb-lfogvaSpCrvCpocLqHwNOI\"\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}